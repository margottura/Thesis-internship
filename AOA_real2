#set the working directory
setwd("C:/Documenti/Laurea magistrale/Tirocinio Duccio")

#upload all libraries
library(raster)
library(sp)
library(readr)
library(terra)
library(rgdal)
library(sf)
library(ecospat)
library(rgbif)
library(maptools)
library(devtools)
library(ade4)
library(ape)
library(biomod2)
library(virtualspecies)
library(viridis)
library(geodata)
library(corrplot)
library(ggcorrplot)
library(factoextra)
library(FactoMineR)
library(ggplot2)
library(tidyverse)

#load the cvs file with mangroves data
m_occ <- read.csv("m_occ.csv", sep="\t")
m_occ

#upload the shapefile from qgis
m_shp <- vect("C:/Documenti/Laurea magistrale/Tirocinio Duccio/m_shp.shp")

#let's keep only the data for lat, long and year of observation
m_subset <- m_occ[, c("decimalLatitude", "decimalLongitude", "year", "institutionCode")]
m_subset

# String containing the names of raster files
rastlist <- list.files(path ="C:/Documenti/Laurea magistrale/Tirocinio Duccio/bioclim", pattern = "CHELSA", full.names = TRUE)


# Using the list of names, all the files are imported into a single raster package
test_raster <- terra::rast(rastlist)
rasters <- lapply(rastlist, terra::rast)
mystack <- terra::rast(rasters)
print(mystack)

names(mystack) <- c("mean annual air temperature",
                    "mean diurnal air temperature range",
                    "isothermality",
                    "temperature seasonality",
                    "mean daily maximum air temperature of the warmest month",
                    "mean daily minimum air temperature of the coldest month",
                    "annual range of air temperature",
                    "mean daily mean air temperatures of the wettest quarter",
                    "mean daily mean air temperatures of the driest quarter",
                    "mean daily mean air temperatures of the warmest quarter",
                    "mean daily mean air temperatures of the coldest quarter",
                    "annual precipitation amount",
                    "precipitation amount of the wettest month",
                    "precipitation amount of the driest month",
                    "precipitation seasonality",
                    "mean monthly precipitation amount of the wettest quarter",
                    "mean monthly precipitation amount of the driest quarter",
                    "mean monthly precipitation amount of the warmest quarter",
                    "mean monthly precipitation amount of the coldest quarter")
mystack

plot(mystack, col =  viridis(500, alpha = 1, begin = 0, end = 1, direction = 1))

#crop for area of interest in Australia
xmin <- 150.65833
xmax <- 154.21909
ymin <- -28.42186
ymax <- -22.93638

ext <- terra::ext(c(xmin, xmax, ymin, ymax))
aus_data <- terra::crop(mystack, ext)
plot(aus_data, col =  viridis (500, alpha = 1, begin = 0, end = 1, direction = 1))

#let's try to visualize one of the viariables with the points of occ
plot(aus_data$`mean annual air temperature`, col =  viridis (500, alpha = 1, begin = 0, end = 1, direction = 1))
points(m_shp, pch=16, col= 9, cex=1)

aus_stack <- stack(aus_data)

#######################################
#statistical analysis
#1. correlation matrix (shows which variables are strongly associated)
# Subsample 10% of pixels and calculate pairwise correlations
r1 <- aus_stack$mean.annual.air.temperature
cor <- cor(sampleRandom(aus_stack, size=ncell(r1)*0.30), method="pearson")
cor

#plot the correlation matrix
df <- corrplot(cor, method="number", col=viridis(30, alpha=1, begin=0, end=1, direction=1), type="lower", tl.pos='ld')
)


#the least correlated are: Precipitation.of.Coldest.Quarter(bio19), Max.Temperature.of.Warmest.Month (bio5), Precipitation.of.Driest.Quarter (bio17)
#Mean.Temperature.of.Wettest.Quarter (bio10), Min.Temperature.of.Coldest.Month (bio6), Mean.Diurnal.Range (bio2), Isothermality (bio3)

#select only some variables

aus_stack <- aus_stack[[c(3,5,5,8,12,17,19)]]
aus_stack

plot(aus_stack, col=viridis(500, alpha =1, begin=0, end=1, direction=1))

#let's create three different stacks for each dataset
wildnet <- m_subset%>%filter(institutionCode!="BRI")
BRI_herbrecs <- m_subset%>%filter(institutionCode=="BRI")

##########RANDOM FOREST AOI##################
#
library(CAST)
library(caret)
library(terra)
library(sf)
library(viridis)
library(gridExtra)

#generate predictors

#let's use the most important values of each dataset as response

response1 <- aus_stack$annual.precipitation.amount
response2 <- aus_stack$mean.daily.mean.air.temperatures.of.the.wettest.quarter

#set.seed(15)
#samplepoints <- st_as_sf(st_sample(mask,20,"random"))

#plot(response, col=viridis(100))
#plot(samplepoints, col="red", add=T, pch=3)

coordinates(wildnet) <- ~ decimalLongitude + decimalLatitude
crs(wildnet)
myCRS <- CRS("+init=epsg:4326") # WGS 84
crs(wildnet) <- myCRS

coordinates(BRI_herbrecs) <-~ decimalLongitude + decimalLatitude
crs(BRI_herbrecs) <- myCRS

#model training
#predictors and response are extracted for the sampling locations
trainDat1 <- terra::extract(aus_stack, wildnet)
trainDat2 <- terra::extract(aus_stack, BRI_herbrecs)
trainDat1 <- na.omit(trainDat1)
trainDat2 <- na.omit(trainDat1)

trainRes1 <- terra::extract(response1, wildnet, na.rm=FALSE, ID=FALSE)
trainRes2 <- terra::extract(response2, BRI_herbrecs, na.rm=FALSE, ID=FALSE)


# Estrai i predittori e la risposta per le posizioni di campionamento
trainDat1 <- extract(aus_stack, wildnet)
trainDat1 <- na.omit(as.data.frame(trainDat1))

trainDat2 <- extract(aus_stack, BRI_herbrecs)
trainDat2 <- na.omit(as.data.frame(trainDat2))

trainRes1 <- extract(response1, wildnet)
trainRes1 <- na.omit(as.numeric(unlist(trainRes1)))

trainRes2 <- extract(response2, BRI_herbrecs)
trainRes2 <- na.omit(as.numeric(unlist(trainRes2)))

#train the model with RandomForest
set.seed(10)
model1 <- train(trainDat1[,names(aus_stack)], trainRes1, method="rf", importance=TRUE,
                trControl=trainControl(method="cv"))
print(model1)


#Random Forest 

#33 samples
#7 predictor

#No pre-processing
#Resampling: Cross-Validated (10 fold) 
#Summary of sample sizes: 30, 31, 30, 29, 29, 29, ... 
#Resampling results across tuning parameters:
  
#  mtry  RMSE       Rsquared   MAE      
#2     0.5169426  0.9664676  0.4190203
#4     0.3654529  0.9799447  0.2839572
#7     0.3284164  0.9816342  0.2482693

#RMSE was used to select the optimal model using the smallest value.
#The final value used for the model was mtry = 7.


model2 <- train(trainDat2[,names(aus_stack)], trainRes2, method="rf", importance=TRUE,
                trControl=trainControl(method="cv"))
print(model2)

#Random Forest 

#33 samples
#7 predictor

#No pre-processing
#Resampling: Cross-Validated (10 fold) 
#Summary of sample sizes: 29, 30, 29, 30, 29, 29, ... 
#Resampling results across tuning parameters:
  
#  mtry  RMSE      Rsquared   MAE     
#2     54.00970  0.6433128  45.25421
#4     54.96225  0.6077978  45.87798
#7     55.96422  0.5582192  46.60271

#RMSE was used to select the optimal model using the smallest value.
#The final value used for the model was mtry = 2.

#variable importance

plot(varImp(model1,scale = F),col="black")

plot(varImp(model2,scale = F),col="black")

#predict and calculate error

prediction1 <- predict(aus_stack, model1, na.rm=T)
truediff1 <- abs(aus_stack-response1)


if (!inherits(response1, "SpatRaster")) {
  response1 <- rast(response1)
}
if (!inherits(prediction1, "SpatRaster")) {
  prediction1 <- rast(prediction1)
}

rast_list <- list(prediction1, response1)


plot(rast(rast_list), main=c("prediction", "reference"))

prediction2 <- predict(aus_stack, model2, na.rm=T)
truediff2 <- abs(aus_stack-response2)

if (!inherits(response2, "SpatRaster")) {
  response2 <- rast(response2)
}

if (!inherits(prediction2, "SpatRaster")) {
  prediction2 <- rast(prediction2)
}


rast_list2 <- list(prediction2, response2)


plot(rast(rast_list2), main=c("prediction", "reference"))

#AOA and LPD calculation
library(CAST)
AOA1 <- aoa(aus_stack, model1, LPD=TRUE, verbose=FALSE)
class(AOA1)
names(AOA1)
print(AOA1)
plot(AOA1)

plot(truediff1,col=viridis(100),main="true prediction error")
plot(AOA1$DI,col=viridis(100),main="DI")
plot(AOA1$LPD,col=viridis(100),main="LPD")
plot(prediction1, col=viridis(100),main="prediction for AOA")
plot(AOA1$AOA,col=c("grey","transparent"),add=T,plg=list(x="topleft",box.col="black",bty="o",title="AOA"))


AOA2 <- aoa(aus_stack, model2, LPD=TRUE, verbose=FALSE)
class(AOA2)
names(AOA2)
print(AOA2)
plot(AOA2)

plot(truediff2,col=viridis(100),main="true prediction error")
plot(AOA2$DI,col=viridis(100),main="DI")
plot(AOA2$LPD,col=viridis(100),main="LPD")
plot(prediction2, col=viridis(100),main="prediction for AOA")
plot(AOA2$AOA,col=c("grey","transparent"),add=T,plg=list(x="topleft",box.col="black",bty="o",title="AOA"))

par(mfrow=c(1,2))
plot1 <- plot(AOA1$AOA,col=c("grey","transparent"),add=T,plg=list(x="topleft",box.col="black",bty="o",title="AOA"))
plot2 <- plot(AOA2$AOA,col=c("grey","transparent"),add=T,plg=list(x="topleft",box.col="black",bty="o",title="AOA"))

dev.off()

#comparison prediction error with model error

#for widlnet:
RMSE(values(prediction1)[values(AOA1$AOA)==1], values(response1)[values(AOA1$AOA)==1])
#[1] 0.7101415

RMSE(values(prediction1)[values(AOA1$AOA)==0], values(response2)[values(AOA1$AOA)==0])
#[1] 377.2966

model1$results
# mtry      RMSE  Rsquared       MAE    RMSESD RsquaredSD     MAESD
#1    2 0.5169426 0.9664676 0.4190203 0.6211883 0.05481181 0.4810389
#2    4 0.3654529 0.9799447 0.2839572 0.4884301 0.03477394 0.3533586
#3    7 0.3284164 0.9816342 0.2482693 0.4600573 0.03463336 0.3144858

#for BRI:
RMSE(values(prediction2)[values(AOA2$AOA)==1], values(response2)[values(AOA2$AOA)==1])
#[1] 47.53503

RMSE(values(prediction2)[values(AOA2$AOA)==0], values(response2)[values(AOA2$AOA)==0])
#[1] 121.0103

model2$results
# mtry     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD
#1    2 54.00970 0.6433128 45.25421 34.12850  0.3528454 27.85001
#2    4 54.96225 0.6077978 45.87798 33.99250  0.3435966 27.95008
#3    7 55.96422 0.5582192 46.60271 33.72466  0.3612592 27.83189


library(scam)

#relationship between DI/LPD and performance measure
#DI_RMSE
#for wildnet
DI_RMSE_relation <- errorProfiles(model1, AOA1$parameters, multiCV=TRUE,
                                  window.size=5, length.out = 5, variable="DI")
plot(DI_RMSE_relation)

#for BRI
DI_RMSE_relation2 <- errorProfiles(model2, AOA2$parameters, multiCV=TRUE,
                                   window.size=5, length.out = 5, variable="DI")
plot(DI_RMSE_relation2)

#LPD_RMSE
#for wildnet
LPD_RMSE_relation <- errorProfiles(model1, AOA1$parameters, multiCV=TRUE,
                                   window.size=5, length.out=5, variable= "LPD")
plot(LPD_RMSE_relation)

#for BRI
LPD_RMSE_relation2 <- errorProfiles(model2, AOA2$parameters,
                                    multiCV=TRUE, window.size=5, length.out=5, variable="LPD")
plot(LPD_RMSE_relation2)

#for wildnet
DI_expected_RMSE1 = terra::predict(AOA1$DI, DI_RMSE_relation)
LPD_expected_RMSE1 = terra::predict(AOA1$LPD, LPD_RMSE_relation)

# account for multiCV changing the DI threshold
DI_updated_AOA1 = AOA1$DI > attr(DI_RMSE_relation, "AOA_threshold")

# account for multiCV changing the DI threshold
LPD_updated_AOA1 = AOA1$DI > attr(LPD_RMSE_relation, "AOA_threshold")

plot(DI_expected_RMSE1,col=viridis(100),main="DI expected RMSE")
plot(DI_updated_AOA1, col=c("grey","transparent"),add=TRUE,plg=list(x="topleft",box.col="black",bty="o",title="AOA"))

#for BRI
DI_expected_RMSE2 = terra::predict(AOA2$DI, DI_RMSE_relation)
LPD_expected_RMSE2 = terra::predict(AOA2$LPD, LPD_RMSE_relation)

# account for multiCV changing the DI threshold
DI_updated_AOA2 = AOA2$DI > attr(DI_RMSE_relation2, "AOA_threshold")

# account for multiCV changing the DI threshold
LPD_updated_AOA2 = AOA2$DI > attr(LPD_RMSE_relation2, "AOA_threshold")

plot(DI_expected_RMSE2,col=viridis(100),main="DI expected RMSE")
plot(DI_updated_AOA2, col=c("grey","transparent"),add=TRUE,plg=list(x="topleft",box.col="black",bty="o",title="AOA"))
